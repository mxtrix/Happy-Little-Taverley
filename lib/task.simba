(*
Task Management
=================

  The Task file stores the functions related to the TTaskArray, and
  stores properties of the TTask type.

*)

{$I SRL-6/SRL.Simba}
{$I SPS/LIB/SPS-RS3.simba}
{$f-}

(*
type TTask
~~~~~~~~~~~~

A record that stores information about the tasks.

Example:

.. code-block:: pascal

    with task[0] do
    begin
      name := 'Tree cutting';
      location := [100, 100, 50, 50];
      lodestone:= LOCATION_TAVERLEY;
      path := [point(100, 100), point(110, 90), point(120, 80)];
      isMember := false;
      skill := SKILL_WOODCUTTING;
      requiredLevel := 1;
      isActive := true;
    end;
*)
type
  TTask = record
    name: string;
    location: TBox;
    lodestone: integer;
    path: TPointArray;
    isMember: boolean;
    skill: integer;
    requiredLevel: integer; // level required for the task's skill
    isActive: boolean;
    worked: TTimeMarker;    // Will auto-start when a task is started
  end;

  TTaskArray = array of TTask;

(*
Task Variables
~~~~~~~~~~~~~~~~

  All the variables associated with task.simba.

    * tasks: TTaskArray; An array of tasks (each holds tasks information).
    * currentTask: integer; The task currently active
*)

var
  tasks: TTaskArray;
  currentTask: integer;

(*
TTask.write
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTask.write()

Writes information about the task to the debug box.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

   tasks[currentTask].write();

*)
procedure TTask.write();
begin
  print('TTask.write()', TDebug.HEADER);

  print('Task Name: ' + self.name);
  print('Location: ' + toStr(self.location));
  print('IsMember: ' + ToStr(self.isMember));
  print('IsActive: ' + toStr(self.isActive));
  print('Required Level: ' + toStr(self.requiredLevel));
  print('Worked: ' + toStr(self.worked.getTime()));

  print('TTask.write()', TDebug.FOOTER);
end;

(*
TTask.canDo
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTask.canDo

Returns true if the player has the required skill level to do the task

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  if (not tasks[currentTask].canDo()) then
    tasks.next()

*)
function TTask.canDo(): boolean;
begin
  result := tabStats.getSkillLevel(self.skill) >= self.requiredLevel;
end;

(*
TTask.isInArea
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTask.isInArea(): boolean

Description

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  if not tasks[currentTask].isInArea() then
    tasks.[currentTask].travelTo();

*)
function TTask.isInArea(): boolean;
begin
  result := self.location.isPointInside(sps.getPlayerPos());
end;

(*
TTask.travelTo
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTask.travelTo(): boolean;

Will lodestone (if necessary) and walk into the task location area.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  if tasks[currentTask].travelTo() then
    writeLn('We are not at the task area!');

*)
function TTask.travelTo(): boolean;
var
  t: TTimeMarker;
  p: TPoint;
begin
  if not self.isInArea() then
  begin
    if self.lodestone <> -1 then
    begin
      lodestoneScreen.teleportTo(self.lodestone);

      t.start();
      repeat
        wait(100);
      until minimap.findSymbol(p, MM_SYMBOL_LODESTONE, minimap.getBounds()) or (t.getTime() > 15000);

    end;

    if not sps.walkPath(self.path) then
      sps.blindWalk(self.path[high(self.path)]);

    result := self.isInArea();
  end else
    exit(true);
end;

(*
TTaskArray.getActive
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTaskArray.getActive(): integer;

Returns the number of active tasks

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  if tasks.getActive() > 1 then
    writeLn('There is more than 1 active task');

*)
function TTaskArray.getActive(): integer;
var
  i: integer;
begin
  result := 0;

  for i := 0 to high(self) do
    if (self[i].isActive) then
      inc(result);
end;

(*
TTaskArray._add
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TTaskArray._add();

Adds a task to the task array.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks._add(newTask);


*)
procedure TTaskArray._add(const info: TTask);
var
  h: integer;
begin
  setLength(self, length(self) + 1);
  self[high(self)] := info;
end;

(*
TTaskArray.setDefaults();
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTaskArray.setDefaults();

Initialised the task timers and sets the tasks to active

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks.setDefault();

*)
procedure TTaskArray.setDefaults();
var
  i: integer;
begin
  for i := 0 to high(self) do
  begin
    self[i].isActive := true;
    self[i].worked.name := 'Task ' + toStr(i);
    self[i].worked.start();
    self[i].worked.pause();
  end;
end;

(*
TTaskArray.setup
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TTaskArray.setup();

Sets up the task names, skill, required levels, lodestone, locations and paths.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks.setup([task1, task2, task3, task4]);

*)
procedure TTaskArray.setup(const tasks: TTaskArray);
var
  i: integer;
  t: TTask;
begin

  for i := 0 to high(tasks) do
  begin
    t.name := tasks[i].name;
    t.skill := tasks[i].skill;
    t.requiredLevel := tasks[i].requiredLevel;
    t.isMember := tasks[i].isMember;
    t.location := tasks[i].location;
    t.lodestone := tasks[i].lodestone;
    t.path := tasks[i].path;
    self._add(t);
  end;

  self.setDefaults();
end;

(*
TTaskArray.switchTo()
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTaskArray.switchTo(): boolean;

Switches to the task indicated by the 'task' parameter. By default, it leaves
the previous task as active, but you can set active to false.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks.switchTo(TASK_MINING, false);

*)
function TTaskArray.switchTo(task: integer; active: boolean = true): boolean;
begin
  self[currentTask].isActive := active;

  if (self.getActive() <= 0) then
  begin
    print('Can''t switch task - all tasks are inactive.');
    exit(false);
  end;

  print('Switching to task ['+ toStr(task) + '] '+ self[task].name);

  if self[task].canDo() then
  begin
    currentTask := task;
    result := true;
  end;
end;

(*
TTaskArray.next
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTaskArray.next(active: boolean): boolean;

Switches to the next task in the task array. By default, it leaves
the previous task as active, but you can set active to false.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks.next(true);

*)
function TTaskArray.next(active: boolean = true): boolean;
var
  next: integer;
begin
  next := (currentTask + 1) mod length(self);

  while (not self[next].isActive) do
    next := (next + 1) mod length(self);

  result := self.switchTo(next, active);
end;

(*
TTaskArray.randomNext
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TTaskArray.randomNext(active: boolean): boolean;

Switches to the random task in the task array. By default, it leaves
the previous task as active, but you can set active to false.

.. note::

    - by
    - Last updated:

Example:

.. code-block:: pascal

  tasks.randomNext(true);

*)
function TTaskArray.randomNext(active: boolean = true): boolean;
var
  next: integer;
begin
  next := random(length(self));

  while (not self[next].isActive) or (next = currentTask) do
  begin
    if (self.getActive() = 1) and (next = currentTask) then
      break;

    next := random(length(self));
  end;

  result := self.switchTo(next, active);
end;

{$f+}

